#!/bin/bash

# Script de AN√ÅLISIS de errores de compilaci√≥n (SOLO LECTURA)
# Este script NO modifica archivos, solo reporta qu√© hay que hacer
# Autor: Asistente de Programaci√≥n

set -e
PROJECT_ROOT="."
SRC_MAIN="src/main/java/informviva/gest"

echo "üîç AN√ÅLISIS DE ERRORES DE COMPILACI√ìN (Solo Lectura)"
echo "=================================================="
echo "Este script NO modifica archivos, solo analiza y reporta."
echo ""

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Contadores
MISSING_FILES=0
MISSING_METHODS=0
TYPE_ERRORS=0
INTERFACE_ERRORS=0

echo "üìÅ Verificando estructura del proyecto..."

# Funci√≥n para verificar archivo
check_file_exists() {
    local file=$1
    local description=$2
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úÖ${NC} $description: $file"
        return 0
    else
        echo -e "${RED}‚ùå${NC} $description: $file ${RED}[FALTA]${NC}"
        ((MISSING_FILES++))
        return 1
    fi
}

# Funci√≥n para verificar m√©todo en archivo
check_method_in_file() {
    local file=$1
    local method=$2
    local description=$3
    if [ -f "$file" ]; then
        if grep -q "$method" "$file"; then
            echo -e "${GREEN}‚úÖ${NC} $description: $method"
            return 0
        else
            echo -e "${YELLOW}‚ö†Ô∏è${NC} $description: $method ${YELLOW}[FALTA]${NC}"
            ((MISSING_METHODS++))
            return 1
        fi
    else
        echo -e "${RED}‚ùå${NC} Archivo no existe para verificar: $file"
        return 1
    fi
}

# Funci√≥n para analizar errores espec√≠ficos
analyze_compilation_errors() {
    echo ""
    echo "üî¨ AN√ÅLISIS DETALLADO DE ERRORES:"
    echo "================================"

    # 1. Verificar enum FormatoExportacion
    echo ""
    echo "${BLUE}1. ENUM FormatoExportacion${NC}"
    check_file_exists "$SRC_MAIN/enums/FormatoExportacion.java" "Enum FormatoExportacion"

    # 2. Verificar repositorios
    echo ""
    echo "${BLUE}2. REPOSITORIOS${NC}"
    check_file_exists "$SRC_MAIN/repository/ClienteRepositorio.java" "ClienteRepositorio"
    check_file_exists "$SRC_MAIN/repository/VentaRepositorio.java" "VentaRepositorio"

    if [ -f "$SRC_MAIN/repository/ClienteRepositorio.java" ]; then
        check_method_in_file "$SRC_MAIN/repository/ClienteRepositorio.java" "findByTelefono" "ClienteRepositorio.findByTelefono"
        check_method_in_file "$SRC_MAIN/repository/ClienteRepositorio.java" "findByNombreContainingOrEmailContainingIgnoreCase" "ClienteRepositorio.findByNombreContainingOrEmailContainingIgnoreCase"
    fi

    if [ -f "$SRC_MAIN/repository/VentaRepositorio.java" ]; then
        check_method_in_file "$SRC_MAIN/repository/VentaRepositorio.java" "findByClienteId" "VentaRepositorio.findByClienteId"
    fi

    # 3. Verificar servicios
    echo ""
    echo "${BLUE}3. INTERFACES DE SERVICIOS${NC}"
    check_file_exists "$SRC_MAIN/service/ClienteServicio.java" "ClienteServicio"
    check_file_exists "$SRC_MAIN/service/VentaServicio.java" "VentaServicio"
    check_file_exists "$SRC_MAIN/service/ValidacionDatosServicio.java" "ValidacionDatosServicio"
    check_file_exists "$SRC_MAIN/service/ImportacionServicio.java" "ImportacionServicio"
    check_file_exists "$SRC_MAIN/service/ExportacionHistorialServicio.java" "ExportacionHistorialServicio"

    if [ -f "$SRC_MAIN/service/ClienteServicio.java" ]; then
        check_method_in_file "$SRC_MAIN/service/ClienteServicio.java" "List<Cliente> buscarPorTelefono" "ClienteServicio.buscarPorTelefono (tipo List)"
        check_method_in_file "$SRC_MAIN/service/ClienteServicio.java" "List<Cliente> listar" "ClienteServicio.listar"
    fi

    if [ -f "$SRC_MAIN/service/VentaServicio.java" ]; then
        check_method_in_file "$SRC_MAIN/service/VentaServicio.java" "List<Venta> listar" "VentaServicio.listar"
        check_method_in_file "$SRC_MAIN/service/VentaServicio.java" "List<Venta> obtenerTodas" "VentaServicio.obtenerTodas"
    fi

    # 4. Verificar implementaciones
    echo ""
    echo "${BLUE}4. IMPLEMENTACIONES DE SERVICIOS${NC}"
    check_file_exists "$SRC_MAIN/service/impl/ClienteServicioImpl.java" "ClienteServicioImpl"
    check_file_exists "$SRC_MAIN/service/impl/ValidacionDatosServicioImpl.java" "ValidacionDatosServicioImpl"
    check_file_exists "$SRC_MAIN/service/impl/ImportacionServicioImpl.java" "ImportacionServicioImpl"

    # 5. Verificar entidades
    echo ""
    echo "${BLUE}5. ENTIDADES${NC}"
    check_file_exists "$SRC_MAIN/model/Producto.java" "Producto"
    check_file_exists "$SRC_MAIN/model/Usuario.java" "Usuario"

    if [ -f "$SRC_MAIN/model/Producto.java" ]; then
        check_method_in_file "$SRC_MAIN/model/Producto.java" "isActivo" "Producto.isActivo"
    fi

    if [ -f "$SRC_MAIN/model/Usuario.java" ]; then
        check_method_in_file "$SRC_MAIN/model/Usuario.java" "isActivo" "Usuario.isActivo"
    fi

    # 6. Verificar DTOs
    echo ""
    echo "${BLUE}6. DTOs${NC}"
    check_file_exists "$SRC_MAIN/dto/VentaDTO.java" "VentaDTO"
    check_file_exists "$SRC_MAIN/dto/VentaDetalleDTO.java" "VentaDetalleDTO"
}

# Funci√≥n para analizar tipos incorrectos en archivos
analyze_type_issues() {
    echo ""
    echo "${BLUE}7. AN√ÅLISIS DE TIPOS INCORRECTOS${NC}"

    # Buscar LocalDate en lugar de LocalDateTime
    echo "Buscando problemas LocalDate vs LocalDateTime..."
    find "$SRC_MAIN" -name "*.java" -type f | while read -r file; do
        if [ -f "$file" ]; then
            # Buscar setFecha con LocalDate
            if grep -n "setFecha.*LocalDate" "$file" 2>/dev/null; then
                echo -e "${YELLOW}‚ö†Ô∏è${NC} Posible problema LocalDate en: $file"
                ((TYPE_ERRORS++))
            fi

            # Buscar BigDecimal vs Double
            if grep -n "BigDecimal.*Double\|Double.*BigDecimal" "$file" 2>/dev/null; then
                echo -e "${YELLOW}‚ö†Ô∏è${NC} Posible problema BigDecimal/Double en: $file"
                ((TYPE_ERRORS++))
            fi
        fi
    done

    # Buscar Optional mal usado
    echo "Buscando problemas con Optional..."
    find "$SRC_MAIN" -name "*.java" -type f | while read -r file; do
        if [ -f "$file" ]; then
            if grep -n "Optional.*cannot be converted" "$file" 2>/dev/null; then
                echo -e "${YELLOW}‚ö†Ô∏è${NC} Posible problema Optional en: $file"
                ((TYPE_ERRORS++))
            fi
        fi
    done
}

# Funci√≥n para generar reporte de errores prioritarios
generate_priority_report() {
    echo ""
    echo "üìä REPORTE DE PRIORIDADES:"
    echo "========================="

    echo ""
    echo "${RED}üî• ERRORES CR√çTICOS (Impiden compilaci√≥n):${NC}"
    echo "1. Crear enum FormatoExportacion"
    echo "2. Agregar m√©todos faltantes en repositorios"
    echo "3. Corregir tipos de retorno en servicios"

    echo ""
    echo "${YELLOW}‚ö†Ô∏è ERRORES IMPORTANTES:${NC}"
    echo "1. Implementar m√©todos faltantes en servicios"
    echo "2. Corregir tipos LocalDate vs LocalDateTime"
    echo "3. Agregar m√©todos isActivo() en entidades"

    echo ""
    echo "${BLUE}üìù SUGERENCIAS:${NC}"
    echo "1. Hacer un commit de Git antes de cualquier cambio"
    echo "2. Corregir errores uno por uno, probando compilaci√≥n"
    echo "3. Empezar por los archivos m√°s simples"
}

# Funci√≥n para generar comandos espec√≠ficos
generate_specific_commands() {
    echo ""
    echo "üõ†Ô∏è COMANDOS ESPEC√çFICOS PARA CORRECCI√ìN:"
    echo "======================================="

    echo ""
    echo "${GREEN}PASO 1: Backup y Git${NC}"
    echo "git add ."
    echo "git commit -m 'Backup antes de correcciones de compilaci√≥n'"

    echo ""
    echo "${GREEN}PASO 2: Crear enum FormatoExportacion${NC}"
    echo "mkdir -p $SRC_MAIN/enums"
    echo "# Crear manualmente el archivo FormatoExportacion.java"

    echo ""
    echo "${GREEN}PASO 3: Probar compilaci√≥n incremental${NC}"
    echo "mvn compile 2>&1 | head -20  # Ver primeros 20 errores"

    echo ""
    echo "${GREEN}PASO 4: Corregir archivo por archivo${NC}"
    echo "# Empezar por ClienteRepositorio.java"
    echo "# Luego VentaRepositorio.java"
    echo "# Finalmente los servicios"
}

# Ejecutar an√°lisis
echo "üöÄ Iniciando an√°lisis..."
analyze_compilation_errors
analyze_type_issues
generate_priority_report
generate_specific_commands

# Resumen final
echo ""
echo "üìà RESUMEN DEL AN√ÅLISIS:"
echo "======================="
echo -e "Archivos faltantes: ${RED}$MISSING_FILES${NC}"
echo -e "M√©todos faltantes: ${YELLOW}$MISSING_METHODS${NC}"
echo -e "Problemas de tipos: ${YELLOW}$TYPE_ERRORS${NC}"

echo ""
echo "‚úÖ AN√ÅLISIS COMPLETADO SIN MODIFICAR ARCHIVOS"
echo ""
echo "üí° RECOMENDACI√ìN:"
echo "1. Revisar el reporte anterior"
echo "2. Hacer backup con Git"
echo "3. Corregir errores manualmente uno por uno"
echo "4. Probar compilaci√≥n despu√©s de cada cambio"
echo ""
echo "‚ö†Ô∏è  NO ejecutes scripts de modificaci√≥n masiva sin probar antes"