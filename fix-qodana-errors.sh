#!/bin/bash

# ===================================================================
# Script Bash para corregir errores cr√≠ticos de Qodana
# ===================================================================

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
GRAY='\033[0;37m'
NC='\033[0m' # No Color

# Configuraci√≥n
DRY_RUN=false
BACKUP=true
PROJECT_ROOT=$(pwd)
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_DIR="$PROJECT_ROOT/backup-qodana-$TIMESTAMP"

# Procesar argumentos
while [[ $# -gt 0 ]]; do
    case $1 in
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --no-backup)
            BACKUP=false
            shift
            ;;
        -h|--help)
            echo "Uso: $0 [--dry-run] [--no-backup]"
            echo "  --dry-run    Solo mostrar lo que se har√≠a"
            echo "  --no-backup  No crear backup de archivos"
            exit 0
            ;;
        *)
            echo "Argumento desconocido: $1"
            exit 1
            ;;
    esac
done

echo -e "${GREEN}üîß Iniciando correcci√≥n de errores cr√≠ticos de Qodana...${NC}"
echo "======================================================="

# Crear directorio de backup
if [ "$BACKUP" = true ]; then
    echo -e "${YELLOW}üìÅ Creando backup en: $BACKUP_DIR${NC}"
    mkdir -p "$BACKUP_DIR"
fi

# Funci√≥n para crear backup
create_backup() {
    local file_path="$1"
    if [ "$BACKUP" = true ] && [ -f "$file_path" ]; then
        local filename=$(basename "$file_path")
        cp "$file_path" "$BACKUP_DIR/$filename.bak"
        echo -e "  ${GRAY}‚úì Backup: $filename${NC}"
    fi
}

# Funci√≥n para mostrar resultado
show_result() {
    local message="$1"
    if [ "$DRY_RUN" = true ]; then
        echo -e "  ${CYAN}üîç [DRY RUN] $message${NC}"
    else
        echo -e "  ${GREEN}‚úì $message${NC}"
    fi
}

# Funci√≥n para verificar compilaci√≥n
test_compilation() {
    echo -e "${YELLOW}üß™ Probando compilaci√≥n...${NC}"
    if mvn clean compile -q > /dev/null 2>&1; then
        echo -e "  ${GREEN}‚úÖ Compilaci√≥n exitosa${NC}"
        return 0
    else
        echo -e "  ${RED}‚ùå Error de compilaci√≥n${NC}"
        return 1
    fi
}

# =============== CORRECCI√ìN 1: AsyncExportController ===============
echo -e "\n${MAGENTA}1Ô∏è‚É£ Corrigiendo AsyncExportController...${NC}"

ASYNC_FILE="$PROJECT_ROOT/src/main/java/informviva/gest/controlador/AsyncExportController.java"

if [ -f "$ASYNC_FILE" ]; then
    if grep -q "private CompletableFuture<Void> procesarExportacionAsync" "$ASYNC_FILE"; then
        create_backup "$ASYNC_FILE"

        if [ "$DRY_RUN" = false ]; then
            sed -i 's/private CompletableFuture<Void> procesarExportacionAsync/public CompletableFuture<Void> procesarExportacionAsync/g' "$ASYNC_FILE"
        fi
        show_result "M√©todo cambiado de private a public"

        if [ "$DRY_RUN" = false ]; then
            if ! test_compilation; then
                echo -e "  ${YELLOW}üîÑ Restaurando desde backup...${NC}"
                cp "$BACKUP_DIR/AsyncExportController.java.bak" "$ASYNC_FILE"
                return 1
            fi
        fi
    else
        echo -e "  ${BLUE}‚ÑπÔ∏è  Ya est√° corregido o patr√≥n no encontrado${NC}"
    fi
else
    echo -e "  ${RED}‚ùå Archivo no encontrado: AsyncExportController.java${NC}"
fi

# =============== CORRECCI√ìN 2: ImportacionAPIControlador ===============
echo -e "\n${MAGENTA}2Ô∏è‚É£ Corrigiendo ImportacionAPIControlador...${NC}"

API_FILE="$PROJECT_ROOT/src/main/java/informviva/gest/controlador/api/ImportacionAPIControlador.java"

if [ -f "$API_FILE" ]; then
    if grep -q "@Autowired" "$API_FILE" && grep -q "private ImportacionServicio importacionServicio" "$API_FILE"; then
        create_backup "$API_FILE"

        if [ "$DRY_RUN" = false ]; then
            # Crear archivo temporal con las correcciones
            awk '
            /@Autowired/ {
                if (getline next_line && next_line ~ /private ImportacionServicio importacionServicio/) {
                    print "    private final ImportacionServicio importacionServicio;"
                    print ""
                    print "    public ImportacionAPIControlador(ImportacionServicio importacionServicio) {"
                    print "        this.importacionServicio = importacionServicio;"
                    print "    }"
                    next
                } else {
                    print
                    print next_line
                }
                next
            }
            {print}
            ' "$API_FILE" > "$API_FILE.tmp" && mv "$API_FILE.tmp" "$API_FILE"
        fi
        show_result "Constructor injection implementado"

        if [ "$DRY_RUN" = false ]; then
            if ! test_compilation; then
                echo -e "  ${YELLOW}üîÑ Restaurando desde backup...${NC}"
                cp "$BACKUP_DIR/ImportacionAPIControlador.java.bak" "$API_FILE"
            fi
        fi
    else
        echo -e "  ${BLUE}‚ÑπÔ∏è  Ya usa constructor injection${NC}"
    fi
else
    echo -e "  ${RED}‚ùå Archivo no encontrado: ImportacionAPIControlador.java${NC}"
fi

# =============== CORRECCI√ìN 3: ImportacionControlador ===============
echo -e "\n${MAGENTA}3Ô∏è‚É£ Corrigiendo ImportacionControlador...${NC}"

CONTROLLER_FILE="$PROJECT_ROOT/src/main/java/informviva/gest/controlador/ImportacionControlador.java"

if [ -f "$CONTROLLER_FILE" ]; then
    if grep -q "@Autowired" "$CONTROLLER_FILE" && grep -q "private ImportacionServicio importacionServicio" "$CONTROLLER_FILE"; then
        create_backup "$CONTROLLER_FILE"

        if [ "$DRY_RUN" = false ]; then
            # Crear archivo temporal con las correcciones
            awk '
            /@Autowired/ {
                if (getline next_line && next_line ~ /private ImportacionServicio importacionServicio/) {
                    print "    private final ImportacionServicio importacionServicio;"
                    print ""
                    print "    public ImportacionControlador(ImportacionServicio importacionServicio) {"
                    print "        this.importacionServicio = importacionServicio;"
                    print "    }"
                    next
                } else {
                    print
                    print next_line
                }
                next
            }
            {print}
            ' "$CONTROLLER_FILE" > "$CONTROLLER_FILE.tmp" && mv "$CONTROLLER_FILE.tmp" "$CONTROLLER_FILE"
        fi
        show_result "Constructor injection implementado"

        if [ "$DRY_RUN" = false ]; then
            if ! test_compilation; then
                echo -e "  ${YELLOW}üîÑ Restaurando desde backup...${NC}"
                cp "$BACKUP_DIR/ImportacionControlador.java.bak" "$CONTROLLER_FILE"
            fi
        fi
    else
        echo -e "  ${BLUE}‚ÑπÔ∏è  Ya usa constructor injection${NC}"
    fi
else
    echo -e "  ${RED}‚ùå Archivo no encontrado: ImportacionControlador.java${NC}"
fi

# =============== CORRECCI√ìN 4: TendenciaVenta ===============
echo -e "\n${MAGENTA}4Ô∏è‚É£ Buscando archivo TendenciaVenta...${NC}"

# Buscar en posibles ubicaciones
TENDENCIA_PATHS=(
    "$PROJECT_ROOT/src/main/java/informviva/gest/dto/TendenciaVenta.java"
    "$PROJECT_ROOT/src/main/java/informviva/gest/enums/TendenciaVenta.java"
    "$PROJECT_ROOT/src/main/java/informviva/gest/model/TendenciaVenta.java"
)

TENDENCIA_FILE=""
for path in "${TENDENCIA_PATHS[@]}"; do
    if [ -f "$path" ]; then
        TENDENCIA_FILE="$path"
        echo -e "  ${GREEN}‚úì Archivo encontrado: $(echo $path | sed "s|$PROJECT_ROOT/||")${NC}"
        break
    fi
done

if [ -n "$TENDENCIA_FILE" ]; then
    if grep -q "package informviva.gest.dto;" "$TENDENCIA_FILE" && [[ "$TENDENCIA_FILE" == *"/enums/"* ]]; then
        create_backup "$TENDENCIA_FILE"

        if [ "$DRY_RUN" = false ]; then
            sed -i 's/package informviva\.gest\.dto;/package informviva.gest.enums;/g' "$TENDENCIA_FILE"
        fi
        show_result "Package statement corregido de dto a enums"
    else
        echo -e "  ${BLUE}‚ÑπÔ∏è  Package statement es correcto${NC}"
    fi
else
    echo -e "  ${RED}‚ùå Archivo TendenciaVenta.java no encontrado${NC}"
    echo -e "     ${GRAY}Ubicaciones buscadas:${NC}"
    for path in "${TENDENCIA_PATHS[@]}"; do
        echo -e "     ${GRAY}- $(echo $path | sed "s|$PROJECT_ROOT/||")${NC}"
    done
fi

# =============== REFACTORIZACI√ìN ADICIONAL: ProductoImportacionServicio ===============
echo -e "\n${MAGENTA}5Ô∏è‚É£ Refactorizando ProductoImportacionServicio...${NC}"

PROD_IMPORT_FILE="$PROJECT_ROOT/src/main/java/informviva/gest/service/ProductoImportacionServicio.java"

if [ -f "$PROD_IMPORT_FILE" ]; then
    if grep -q "@Autowired" "$PROD_IMPORT_FILE" && grep -q "private ProductoServicio productoServicio" "$PROD_IMPORT_FILE"; then
        create_backup "$PROD_IMPORT_FILE"

        if [ "$DRY_RUN" = false ]; then
            awk '
            /@Autowired/ {
                if (getline next_line && next_line ~ /private ProductoServicio productoServicio/) {
                    print "    private final ProductoServicio productoServicio;"
                    print ""
                    print "    public ProductoImportacionServicio(ProductoServicio productoServicio) {"
                    print "        this.productoServicio = productoServicio;"
                    print "    }"
                    next
                } else {
                    print
                    print next_line
                }
                next
            }
            {print}
            ' "$PROD_IMPORT_FILE" > "$PROD_IMPORT_FILE.tmp" && mv "$PROD_IMPORT_FILE.tmp" "$PROD_IMPORT_FILE"
        fi
        show_result "ProductoImportacionServicio refactorizado"
    else
        echo -e "  ${BLUE}‚ÑπÔ∏è  Ya usa constructor injection${NC}"
    fi
else
    echo -e "  ${RED}‚ùå Archivo no encontrado: ProductoImportacionServicio.java${NC}"
fi

# =============== REFACTORIZACI√ìN ADICIONAL: ClienteImportacionServicio ===============
echo -e "\n${MAGENTA}6Ô∏è‚É£ Refactorizando ClienteImportacionServicio...${NC}"

CLIENTE_IMPORT_FILE="$PROJECT_ROOT/src/main/java/informviva/gest/service/ClienteImportacionServicio.java"

if [ -f "$CLIENTE_IMPORT_FILE" ]; then
    if grep -q "@Autowired" "$CLIENTE_IMPORT_FILE" && grep -q "private ClienteServicio clienteServicio" "$CLIENTE_IMPORT_FILE"; then
        create_backup "$CLIENTE_IMPORT_FILE"

        if [ "$DRY_RUN" = false ]; then
            awk '
            /@Autowired/ {
                if (getline next_line && next_line ~ /private ClienteServicio clienteServicio/) {
                    print "    private final ClienteServicio clienteServicio;"
                    print ""
                    print "    public ClienteImportacionServicio(ClienteServicio clienteServicio) {"
                    print "        this.clienteServicio = clienteServicio;"
                    print "    }"
                    next
                } else {
                    print
                    print next_line
                }
                next
            }
            {print}
            ' "$CLIENTE_IMPORT_FILE" > "$CLIENTE_IMPORT_FILE.tmp" && mv "$CLIENTE_IMPORT_FILE.tmp" "$CLIENTE_IMPORT_FILE"
        fi
        show_result "ClienteImportacionServicio refactorizado"
    else
        echo -e "  ${BLUE}‚ÑπÔ∏è  Ya usa constructor injection${NC}"
    fi
else
    echo -e "  ${RED}‚ùå Archivo no encontrado: ClienteImportacionServicio.java${NC}"
fi

# =============== VERIFICACI√ìN ARCHIVOS DUPLICADOS ===============
echo -e "\n${MAGENTA}7Ô∏è‚É£ Verificando archivos duplicados...${NC}"

DUPLICATE_FILE="$PROJECT_ROOT/src/main/java/informviva/gest/service/impl/ImportacionServicioRefactorizado.java"

if [ -f "$DUPLICATE_FILE" ]; then
    echo -e "  ${RED}‚ùå Encontrado: ImportacionServicioRefactorizado.java${NC}"
    if [ "$DRY_RUN" = false ]; then
        read -p "  ¬øEliminar archivo duplicado? (s/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[SsYy]$ ]]; then
            rm "$DUPLICATE_FILE"
            echo -e "  ${GREEN}‚úÖ Archivo eliminado${NC}"
        fi
    else
        show_result "Se eliminar√≠a ImportacionServicioRefactorizado.java"
    fi
else
    echo -e "  ${GREEN}‚úÖ No hay archivos duplicados${NC}"
fi

# =============== COMPILACI√ìN FINAL ===============
echo -e "\n${MAGENTA}8Ô∏è‚É£ Verificaci√≥n final...${NC}"

if [ "$DRY_RUN" = false ]; then
    test_compilation
else
    echo -e "  ${CYAN}üîç [DRY RUN] Se ejecutar√≠a: mvn clean compile${NC}"
fi

# =============== RESUMEN ===============
echo -e "\n${GREEN}‚úÖ PROCESO COMPLETADO${NC}"
echo "==================="

echo -e "\n${CYAN}üìä Refactorizaciones autom√°ticas:${NC}"
echo -e "${GREEN}‚úÖ AsyncExportController (private ‚Üí public)${NC}"
echo -e "${GREEN}‚úÖ ImportacionAPIControlador (constructor injection)${NC}"
echo -e "${GREEN}‚úÖ ImportacionControlador (constructor injection)${NC}"
echo -e "${GREEN}‚úÖ ProductoImportacionServicio (constructor injection)${NC}"
echo -e "${GREEN}‚úÖ ClienteImportacionServicio (constructor injection)${NC}"
echo -e "${GREEN}‚úÖ TendenciaVenta (package correction)${NC}"

echo -e "\n${YELLOW}‚ö†Ô∏è  Refactorizaciones manuales pendientes:${NC}"
echo -e "${GRAY}- ImportacionServicioImpl.java (4 dependencias)${NC}"
echo -e "${GRAY}- ExportacionServicioImpl.java (5 dependencias)${NC}"

echo -e "\n${CYAN}üìã Pr√≥ximos pasos:${NC}"
echo -e "${NC}1. Ejecutar sin --dry-run para aplicar cambios${NC}"
echo -e "${NC}2. Refactorizar manualmente los archivos complejos${NC}"
echo -e "${NC}3. Ejecutar: mvn clean compile test${NC}"
echo -e "${NC}4. Ejecutar an√°lisis de Qodana${NC}"

if [ "$BACKUP" = true ] && [ -d "$BACKUP_DIR" ]; then
    echo -e "\n${YELLOW}üìÅ Backups en: $BACKUP_DIR${NC}"
fi

echo -e "\n${GREEN}üöÄ Script completado exitosamente!${NC}"